Submitted by: Nurlan Mammadov
Date of issue: 26.12.2019



Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000 number of records in total
ii. Business table = 10000 number of records in total
iii. Category table = 10000 number of records in total
iv. Checkin table = 10000 number of records in total
v. elite_years table = 10000 number of records in total
vi. friend table = 10000 number of records in total
vii. hours table = 10000 number of records in total
viii. photo table = 10000 number of records in total
ix. review table = 10000 number of records in total
x. tip table = 10000 number of records in total
xi. user table = 10000 number of records in total




2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000 distinct records based on the primary key of business table
ii. Hours = 1562 distinct records based on the foreign key of business_id for the hours table
iii. Category = 2643 distinct records based on the foreign key of business_id for the category table
iv. Attribute = 1115 distinct records based on the foreign key of business_id for the attribute table
v. Review = 10000 distinct records based on the primary key of id for the review table, 8090 distinct records based on the foreign key of business_id for the review table
vi. Checkin = 493 distinct records based on the foreign key of business_id for the checkin table
vii. Photo = 10000 distinct records based on the primary key of id for the photo table, 6493 distinct records based on the foreign key of business_id for the photo table 
viii. Tip = 537 distinct records based on the foreign key of user_id for the tip table, 3979 distinct records based on the foreign key of business_id for the tip table
ix. User = 10000 distinct records based on the primary key of id for the user table
x. Friend = 11 distinct records based on the foreign key of user_id for the friend table
xi. Elite_years = 2780 distinct records based on the foreign key of user_id for the elite_years table

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

Answer: No, there is no single column in the Users table that has null value in its field.
	
	
SQL code used to arrive at answer:
SELECT *
FROM user
/*
 * Check every column of users table to see whether any of those
 * columns contain null value within themselves
*/
WHERE id IS NULL or name IS NULL or review_count IS NULL or
yelping_since IS NULL or useful IS NULL or funny IS NULL or
cool IS NULL or fans IS NULL or average_stars IS NULL or
compliment_hot IS NULL or compliment_more IS NULL or compliment_profile IS
NULL or compliment_cute IS NULL or compliment_list IS NULL or
compliment_note IS NULL or compliment_plain IS NULL or
compliment_cool IS NULL or compliment_funny IS NULL or
compliment_writer IS NULL or compliment_photos IS NULL;


4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:	1.0	max:	5.0	avg: 3.6549 
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 	0	max:	2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
-- Sum the reviews of cities and label it as sum_reviews_by_city
SELECT city, SUM(review_count) AS sum_reviews_by_city
FROM business
GROUP BY city
-- Sort the output data by descending order according to sum of reviews of cities
ORDER BY sum_reviews_by_city DESC;
	
	Copy and Paste the Result Below:

	+-----------------+---------------------+
| city            | sum_reviews_by_city |
+-----------------+---------------------+
| Las Vegas       |               82854 |
| Phoenix         |               34503 |
| Toronto         |               24113 |
| Scottsdale      |               20614 |
| Charlotte       |               12523 |
| Henderson       |               10871 |
| Tempe           |               10504 |
| Pittsburgh      |                9798 |
| Montréal        |                9448 |
| Chandler        |                8112 |
| Mesa            |                6875 |
| Gilbert         |                6380 |
| Cleveland       |                5593 |
| Madison         |                5265 |
| Glendale        |                4406 |
| Mississauga     |                3814 |
| Edinburgh       |                2792 |
| Peoria          |                2624 |
| North Las Vegas |                2438 |
| Markham         |                2352 |
| Champaign       |                2029 |
| Stuttgart       |                1849 |
| Surprise        |                1520 |
| Lakewood        |                1465 |
| Goodyear        |                1155 |
+-----------------+---------------------+
(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT stars AS star_rating, COUNT(stars) AS Count
FROM business
WHERE city = 'Avon'
GROUP BY star_rating;

Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+-------------+-------+
| star_rating | Count |
+-------------+-------+
|         1.5 |     1 |
|         2.5 |     2 |
|         3.5 |     3 |
|         4.0 |     2 |
|         4.5 |     1 |
|         5.0 |     1 |
+-------------+-------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT stars AS star_rating, COUNT(stars) AS Count
FROM business
WHERE city = 'Beachwood'
GROUP BY star_rating;

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+-------------+-------+
| star_rating | Count |
+-------------+-------+
|         2.0 |     1 |
|         2.5 |     1 |
|         3.0 |     2 |
|         3.5 |     2 |
|         4.0 |     1 |
|         4.5 |     2 |
|         5.0 |     5 |
+-------------+-------+		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
--I selected top 3 users (based on their review counts) by their name.
SELECT name, SUM(review_count) AS sum_reviews_by_id
FROM user
GROUP BY id
ORDER BY sum_reviews_by_id DESC
LIMIT 3;	
		
	Copy and Paste the Result Below:
+--------+-------------------+
| name   | sum_reviews_by_id |
+--------+-------------------+
| Gerald |              2000 |
| Sara   |              1629 |
| Yuri   |              1339 |
+--------+------------------		


8. Does posing more reviews correlate with more fans?

SQL code:
--I implemented rsquare calculation between review_count and fans column
--To do this I have implemented 3 subqueries.
SELECT 
review_count
,fans
,R2
FROM user
		,(
		SELECT (avg((review_count - avg_x) * (fans - avg_y)) * avg((review_count - avg_x) * (fans - avg_y)) / (var_x * var_y)
		) AS R2
    FROM user
	    ,(
		    SELECT avg_x
			    ,avg_y
			    ,avg((review_count - avg_x) * (review_count - avg_x)) AS var_x
			    ,avg((fans - avg_y) * (fans - avg_y)) AS var_y
		    FROM user
			    ,(
				    SELECT avg(review_count) AS avg_x
					    ,avg(fans) AS avg_y
			    	FROM user
				    )
		    )
		  );

	Please explain your findings and interpretation of the results:
	If we rely our findings solely on coefficient of determination (rsquare) value then I could conclude that yes there is a mild correlation (R2 = 0.437) between review_count and fans attribute of the user table.
	We could have measured the correlation between the two with the Pearson correlation coefficient. But in this case square root of R2 equals to pearson correlation coefficient. So, this value equals to 0.661.
	This means that yes there is a positive correlation between review_count and fans attribute of the user table. Therefore, in Pearson correlation terms, more reviews lead to more fans for a user.

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
	The word 'love' appears more frequently in reviews than the word 'hate' as frequencies of them are 1780 and 232, respectively. 
	
	SQL code used to arrive at answer:

-- I am gonna use the Union function in order to stack up the two select
-- statements.
SELECT 'love' AS WORD, COUNT(text) AS total_count
FROM review
WHERE text LIKE '%love%'
UNION
SELECT 'hate' AS WORD, COUNT(text) AS total_count
FROM review
WHERE text LIKE '%hate%';
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

--I selected top 10 users (based on their fan sums) by their name.
SELECT name, SUM(fans) AS fans_by_name
FROM user
GROUP BY id
ORDER BY fans_by_name DESC
LIMIT 10;	
	
	Copy and Paste the Result Below:
+-----------+--------------+
| name      | fans_by_name |
+-----------+--------------+
| Amy       |          503 |
| Mimi      |          497 |
| Harald    |          311 |
| Gerald    |          253 |
| Christine |          173 |
| Lisa      |          159 |
| Cat       |          133 |
| William   |          126 |
| Fran      |          124 |
| Lissa     |          120 |
+-----------+--------------+
	
	
11. Is there a strong relationship (or correlation) between having a high number of fans and being listed as "useful" or "funny?" Out of the top 10 users with the highest number of fans, what percent are also listed as “useful” or “funny”?

Key:
0% - 25% - Low relationship
26% - 75% - Medium relationship
76% - 100% - Strong relationship
	
SQL code used to arrive at answer:

--I implemented rsquare calculation between fans and useful column.
--To do this I have implemented 3 subqueries.
1) 'fans' and 'useful'

SELECT 
fans
,useful
,R2
FROM user
		,(
		SELECT (avg((fans - avg_x) * (useful - avg_y)) * avg((fans - avg_x) * (useful - avg_y)) / (var_x * var_y)
		) AS R2
    FROM user
	    ,(
		    SELECT avg_x
			    ,avg_y
			    ,avg((fans - avg_x) * (fans - avg_x)) AS var_x
			    ,avg((useful - avg_y) * (useful - avg_y)) AS var_y
		    FROM user
			    ,(
				    SELECT avg(fans) AS avg_x
					    ,avg(useful) AS avg_y
			    	FROM user
				    )
		    )
		  );

2) 'fans' and 'funny'
--I implemented rsquare calculation between fans and useful column.
--To do this I have implemented 3 subqueries.
SELECT 
fans
,funny
,R2
FROM user
		,(
		SELECT (avg((fans - avg_x) * (funny - avg_y)) * avg((fans - avg_x) * (funny - avg_y)) / (var_x * var_y)
		) AS R2
    FROM user
	    ,(
		    SELECT avg_x
			    ,avg_y
			    ,avg((fans - avg_x) * (fans - avg_x)) AS var_x
			    ,avg((funny - avg_y) * (funny - avg_y)) AS var_y
		    FROM user
			    ,(
				    SELECT avg(fans) AS avg_x
					    ,avg(funny) AS avg_y
			    	FROM user
				    )
		    )
		  );

	
Copy and Paste the Result Below:

1) 'fans' and 'useful' output:                               
						        		
+------+--------+----------------+
| fans | useful |             R2 |                                                                                                         
+------+--------+----------------+           
|   15 |     67 | 0.157528494749 |                                                                                   
|    0 |      0 | 0.157528494749 |
|    0 |     34 | 0.157528494749 | 
|    0 |      2 | 0.157528494749 |
|    0 |      1 | 0.157528494749 |
|    1 |      1 | 0.157528494749 |
|    2 |     10 | 0.157528494749 |                                                                                
|    0 |      0 | 0.157528494749 |                                                                         
|    0 |      0 | 0.157528494749 |
|    0 |      0 | 0.157528494749 |                                                                          
|    0 |      0 | 0.157528494749 |                                                                          
|    0 |      0 | 0.157528494749 |                                                                
|    0 |      0 | 0.157528494749 |                                                                  
|    0 |     15 | 0.157528494749 |                                                                                  
|    0 |      0 | 0.157528494749 |                                                                 
|    0 |      7 | 0.157528494749 |                                                                
|  311 | 122921 | 0.157528494749 |                                                                  
|    0 |      0 | 0.157528494749 |                                                                 
|    2 |     97 | 0.157528494749 |                                                                 
|    0 |      1 | 0.157528494749 |                                                                 
|   10 |     63 | 0.157528494749 |                                                                   
|   23 |     64 | 0.157528494749 |                                                                  
|    0 |      0 | 0.157528494749 |                                                                 
|   23 |    405 | 0.157528494749 |                                                                   
|    0 |     12 | 0.157528494749 |                                                                        
+------+--------+----------------+	

2) 'fans' and 'funny' output:
                        
+------+--------+---------------+
| fans |  funny |            R2 |
+------+--------+---------------+
|   15 |     22 | 0.12488127215 |
|    0 |      0 | 0.12488127215 |
|    0 |     14 | 0.12488127215 |
|    0 |      3 | 0.12488127215 |
|    0 |      0 | 0.12488127215 |
|    1 |      0 | 0.12488127215 |
|    2 |      2 | 0.12488127215 |
|    0 |      0 | 0.12488127215 |
|    0 |      0 | 0.12488127215 |
|    0 |      0 | 0.12488127215 |
|    0 |      0 | 0.12488127215 |
|    0 |      0 | 0.12488127215 |
|    0 |      0 | 0.12488127215 |
|    0 |     13 | 0.12488127215 |
|    0 |      0 | 0.12488127215 |
|    0 |      1 | 0.12488127215 |
|  311 | 122419 | 0.12488127215 |
|    0 |      0 | 0.12488127215 |
|    2 |     57 | 0.12488127215 |
|    0 |      0 | 0.12488127215 |
|   10 |      6 | 0.12488127215 |
|   23 |     15 | 0.12488127215 |
|    0 |      0 | 0.12488127215 |
|   23 |    313 | 0.12488127215 |
|    0 |      5 | 0.12488127215 |
+------+--------+---------------+
	
	
	Please explain your findings and interpretation of the results:
	1) 'fans' and 'useful' relationship: If we again rely our findings solely on coefficient of determination (rsquare) value then I could conclude that yes there is a low correlation (R2 = 0.157) between having more fans and useful attribute of the user table.
	We could have measured the correlation between the two with the Pearson correlation coefficient. But in this case square root of R2 equals to pearson correlation coefficient. So, this value equals to 0.397.
	This means that yes there is a mild positive correlation between fans and useful attribute of the user table. Therefore, in Pearson correlation terms, mildly speaking more fans lead to more usefullness of a review for a user.
	
	2) 'fans' and 'funny' relationship: If we again rely our findings solely on coefficient of determination (rsquare) value then I could conclude that yes there is a low correlation (R2 = 0.125) between having more fans and funny attribute of the user table.
	We could have measured the correlation between the two with the Pearson correlation coefficient. But in this case square root of R2 equals to pearson correlation coefficient. So, this value equals to 0.353.
	This means that yes there is a mild positive correlation between fans and funny attribute of the user table. Therefore, in Pearson correlation terms, mildly speaking more fans lead to more funnier of a review for a user.

		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?

Answer: From the output that I obtained for the food category and city of Las Vegas overall I can conclude the following statement:
All in all, businesses in the food category in Las Vegas who are rated in the range of 4-5 stars have less opening hours than their counterpart who have 2-3 star ratings. This pattern is valid in almost all of the weekdays.
However, this conclusion is specific only for just the chosen category('Food') and city Las Vegas. Therefore, different categories and cities could follow differential patterns.

ii. Do the two groups you chose to analyze have a different number of reviews?

Answer: Again if for the Food category and city of Las Vegas there is two businesses that we can compare that have different star ratings. For this specific configurations of the businesses, 4-5 star rated business has more
reviews (30) than the one who is grouped in the 2-3 stars with only 6 reviews in total. It could be the case that, for different settings, reviews for the 2-3 star rated business(es) could be higher than the 4-5 rated business(es).
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

Answer: I think it wouldn't be reliable conclusion to infer any observation for the location data provided since there is only postal_code, longitude and lattitude for the two businesses. However, it would have been the occasion that
maybe 4-5 star rated business is closer to the city center than the 2-3 star rated business which in turn has led the first business (4-5 star rated) to have higher star ratings and more reviews. But there is no indication of any this
conclusion from the location data provided for these two distinct groups.


SQL code used for analysis:

i. 
SELECT business.name
	,business.city
	,business.stars
	,business.review_count
	,hours
	,postal_code
--Grouping name of the weekdays into integer numbers in order to see the distribution for two distinct groups
	,CASE 
		WHEN hours LIKE '%Monday%'
			THEN 1
		WHEN hours LIKE '%Tuesday%'
			THEN 2
		WHEN hours LIKE '%Wednesday%'
			THEN 3
		WHEN hours LIKE '%Thursday%'
			THEN 4
		WHEN hours LIKE '%Friday%'
			THEN 5
		WHEN hours LIKE '%Saturday%'
			THEN 6
		WHEN hours LIKE '%Sunday%'
			THEN 7
		END weekday_group
--Group the business based on their rating stars
	,CASE 
		WHEN stars >= 2.0
			AND stars <= 3.0
			THEN '2-3 stars'
		WHEN stars >= 4.0
			THEN '4-5 stars'
		END stars_group
FROM business
INNER JOIN hours ON business.id = hours.business_id
INNER JOIN category ON business.id = category.business_id
--I chose the food category within my analysis
WHERE city = 'Las Vegas'
	AND category LIKE 'Food'
GROUP BY weekday_group
	,stars_group;

		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.

Overall comparison: I grouped the businesses based on the fact that whether they are open or not. However, observation number for the two distinct groups are different from each other. The number of observations for the open businesses equal to 8480 while closed 
businesses are only 1520 in total. Therefore, I believe that since there is an imbalanced number of observations between the two, one should be careful in comparing the two groups based on their various charachteristics. In fact, I think differences drawn between the two
wouldn't be reliable conclusions. Nevertheless, I try to display basic descriptive statistics differences between the two groups. First criteria for the differences made base on the review_count attribute, while the second criteria is based on the rating stars of the businesses.

i. Difference 1:
As stated before the first difference between the open and closed businesses focus on the review_count attribute of the business table. If we look at the descriptive stats of the closed businesses (is_open = 0) we can observe that range of review_counts of these businesses
considerably differ from the other group (is_open = 1). Review_count values for the first group (is_open = 0) differ in between the 3 and 700, while minimum and maximum values are equal to 3 and 3873 for the second group (is_open = 1). Average review counts of the open businesses
are higher than their counterparts with the values of 31.75 and 23.19, respectively. Also the same difference can be observed in the variances of the two groups. Variance of the review counts of the open businesses (8022.31) are much higher than the closed businesses' variance (2150.678)
for the review counts attribute of the business table.
        
         
ii. Difference 2:
The second difference between the two group of businesses rely on the star ratings of their respective values. Both group of businesses have their minimum of 1.0 stars and maximum 5.0 stars. As for the average stars for the two distinct groups: average stars of the open businesses are slightly
higher than the closed businesses, with the values of 3.67 and 3.52 stars, respectively. Moreover, variance of the stars for the open businesses also slightly higher than the closed businesses' variance for the star attribute of the business table. Variance of the first group businesses (is_open =1)
equal to 0.98 while the variance of the second group businesses (is_open = 0) equals to 0.82.
        
         
         
SQL code used for analysis:

1) SQL code for difference 1:

SELECT is_open
,COUNT(*) AS nr_obs_open_business
,MIN(business.review_count) AS min_review_count
,MAX(business.review_count) AS max_review_count
,AVG(business.review_count) AS avg_review_count
,AVG((review_count - avg_review_count) * (review_count - avg_review_count)) AS var_review_count
FROM business,
            (
				    SELECT AVG(review_count) as avg_review_count
			    	FROM business
				    )
WHERE is_open = 1
--I combine the descriptive stats for the closed businesses group (is_open = 0) by combining the same query with the is_open = 0 group through the Union function of SQlite.
UNION
SELECT is_open
,COUNT(*) AS nr_obs_close_business
,MIN(business.review_count) AS min_review_count
,MAX(business.review_count) AS max_review_count
,AVG(business.review_count) AS avg_review_count
,AVG((review_count - avg_review_count) * (review_count - avg_review_count)) AS var_review_count
FROM business,
            (
				    SELECT AVG(review_count) as avg_review_count
			    	FROM business
				    )
WHERE is_open = 0;



2) SQL code for difference 2:

SELECT is_open
,MIN(business.stars) AS min_stars
,MAX(business.stars) AS max_stars
,AVG(business.stars) AS avg_stars
,AVG((stars - avg_stars) * (stars - avg_stars)) AS var_stars
FROM business,
            (
				    SELECT AVG(stars) as avg_stars
			    	FROM business
				    )
WHERE is_open = 1
--I combine the descriptive stats for the closed businesses group (is_open = 0) by combining the same query with the is_open = 0 group through the Union function of SQlite.
UNION
SELECT is_open
,MIN(business.stars) AS min_stars
,MAX(business.stars) AS max_stars
,AVG(business.stars) AS avg_stars
,AVG((stars - avg_stars) * (stars - avg_stars)) AS var_stars
FROM business,
            (
				    SELECT AVG(stars) as avg_stars
			    	FROM business
				    )
WHERE is_open = 0;

	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:

As we know from previous tasks that is_open is binary variable which denotes the opennes of a business. Therefore I think this variable of being open or not for a business make this attribute a good candidate to chose it as a dependent variable. 
Hence, I chose to predict whether a business would stay open or close based on some of the attributes from the several tables. One could also explore reviews that are provided by the users which can be considered a natural language text processing task.      
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

There are some determinants that would be important factors for a business to be open. The data for the opennes of a business ('is_open') would be crucial information as stated before that we are predicting whether a business would stay open or not.
Data for this analysis (among others); star ratings of a business, 'review_count' of a business, opening hours for a business and centrality of the business. Location attributes can be gathered from the postal_code, longitude, lattitude information for businesses.
One could also further the analysis by classifying different types of businesses based on the categories information that is stored in the category table. Alongside the data gathering some inner joins of the tables will be implemented by observing the ER diagram
of the dataset.                          
                  
iii. Output of your finished dataset:



         


         
iv. Provide the SQL code you used to create your final dataset:






